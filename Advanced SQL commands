--EXTRACT()
SELECT amount,EXTRACT(WEEK FROM payment_date) AS my_year
FROM payment;

--AGE()
SELECT AGE(payment_date)
FROM payment;

--TO_CHAR()
SELECT TO_CHAR(payment_date,'dd-mm-yyyy')
FROM payment;

SELECT TO_CHAR(payment_date,'mm/dd/yyyy')
FROM payment;

-- TIMESTAMP CHALLENGES:
--During which months did payments occur?
SELECT DISTINCT TO_CHAR(payment_date,'month') AS date
FROM payment
ORDER BY date;

--How many payments occured on a Monday?
SELECT COUNT (EXTRACT('dow' FROM payment_date)) --dow stands for day of week, in numbers, with Sunday = 0
FROM payment
WHERE EXTRACT('dow' FROM payment_date) = 1; 

--*Mathematical operations and functions*
--Percentages
SELECT ROUND(rental_rate/replacement_cost,2)*100 FROM film;

SELECT 0.1*replacement_cost AS deposit
FROM film;

-- concatenating strings
SELECT first_name || ' ' || last_name 
FROM customer;

--to create automatic email addresses
SELECT left(lower(first_name),1) || '.' || lower(last_name) || '@gmail.com'
FROM customer;

--*SubQuery*: allows you to perform a query on the results of another query
-- it involves TWO SELECT statements
--Example 1:
SELECT title,rental_rate
FROM film
WHERE rental_rate > (SELECT AVG(rental_rate) FROM film);

--Example 2 using IN operator:
SELECT film_id,title
FROM film
WHERE film_id IN
(SELECT inventory.film_id
FROM rental
INNER JOIN inventory
ON inventory.inventory_id = rental.inventory_id
WHERE rental.return_date BETWEEN '2005-05-29' AND '2005-05-30')

--People who have AT LEAST ONE payment of 11 dolars:
SELECT first_name,last_name
FROM customer AS c
WHERE 
EXISTS(SELECT * FROM payment as p
	  WHERE p.customer_id = c.customer_id
	  AND amount > 11);
    
--*SELF-JOIN*
To find the movies that have the same length but they don't take into account themselves
SELECT film1.title,film2.title,film1.length
FROM film AS film1
JOIN film AS film2
ON film1.length = film2.length
WHERE film1.film_id != film2.film_id;
