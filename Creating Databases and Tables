--**CREATE TABLE**
-- Example 1
CREATE TABLE account(
	user_id SERIAL PRIMARY KEY,
	username VARCHAR(50) UNIQUE NOT NULL,
	password VARCHAR(50) NOT NULL,
	email VARCHAR(250) UNIQUE NOT NULL,
	created_on TIMESTAMP NOT NULL,
	last_login TIMESTAMP
);

-- Example 2
CREATE TABLE job(
	job_id SERIAL PRIMARY KEY,
	job_name VARCHAR(200) UNIQUE NOT NULL,
	);
  
 -- Example 3: Referencing other primary keys, it means, creating foreign keys
 CREATE TABLE account_job(
	user_id INTEGER REFERENCES account(user_id), --here
	job_id INTEGER REFERENCES job(job_id), --here
	hire_date TIMESTAMP
	);
  
  --**INSERT**
  --Exmaple 1
INSERT INTO account(username,password,email,created_on)
VALUES
('Jose','password','jose@gmail.com',CURRENT_TIMESTAMP);

--Example 2
INSERT INTO job(job_name)
VALUES
('President'),
('Engineer');

--Example 3
INSERT INTO account_job(user_id,job_id,hire_date)
VALUES
(1,1,CURRENT_TIMESTAMP);

--**UPDATE**
--Example 1
UPDATE account
SET last_login = CURRENT_TIMESTAMP;

--Example 2: using data from another table to update the current table
UPDATE account_job
SET hire_date = account.created_on
FROM account
WHERE account_job.user_id = account.user_id;

--Example 3: Using RETURING command
UPDATE account
SET last_login = CURRENT_TIMESTAMP
RETURNING email,created_on,last_login;

--**DELETE**
DELETE FROM job
WHERE job_name = 'Cowboy'
RETURNING job_id,job_name;

--**ALTER table***
-- creating a new table
CREATE TABLE information(
	info_id SERIAL PRIMARY KEY,
	title VARCHAR(50) NOT NULL,
	person VARCHAR(50) NOT NULL UNIQUE
);

--Renaming the table
ALTER TABLE information
RENAME TO new_info;

--Renaming a column of the table
ALTER TABLE new_info
RENAME COLUMN person TO people;

--Altering the previously column constraint
ALTER TABLE new_info
ALTER COLUMN people DROP NOT NULL;

--Inserting a value in a column
INSERT INTO new_info(title)
VALUES
('some new title');

--**DROP**
ALTER TABLE new_info
DROP COLUMN people;

--**CHECK**
-- creating the table using check
CREATE TABLE employees(
emp_id SERIAL PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	birthdate DATE CHECK (birthdate > '1900-01-01'),
	hire_date DATE CHECK (hire_date > birthdate),
	salary INTEGER CHECK (salary > 0)
);

-- inserting values following the check constraint
INSERT INTO employees(
	first_name,
	last_name,
	birthdate,
	hire_date,
	salary)
VALUES
('Jose',
'Portilla',
'1990-11-03',
'2010-01-01',
'100');
